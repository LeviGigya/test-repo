**GIT COMMANDS**

//You must have added an SSH public key to your github account for the machine you are currently using
//  (in: Settings >> SSH and GPG keys).

//If you haven't used git in the directory before
git init

//You must set user.name and user.email:
//local directory only
git config user.name "GitHubLoginName"
git config user.email "your-email@wherever.com"

//global git settings for all repos
git config --GLOBAL user.name "GitHubLoginName"
git config --GLOBAL user.email "your-email@wherever.com"

// rename a local branch
git branch -m v1.02 

// show current working branch
git branch

//clone remote branch to current directory
git clone github:nameofrepo -b <branch>

//clone remote to new local directory
git clone <git@github.com:whatgitdirectory> <name-of-new-folder>

// add new files to branch
git add -A

// commit all changes to branch
git commit -a -m "message of what changed/updated"

// add tag to branch-version for tracking
git tag -a v1.00.01 -m "First official version." // a = annotated / m = message

// push tagged branch to remote branch (not-master)
git push <ssh-key> <branch> --tags


// push the current branch to the specified remote branch (no tags)
git push <ssh-key> <branch>

// show info regarding the requested tag
git show v1.00.01


// tag a new version (same branch / same directory)
git tag -a v1.00.02 -m "Second official version."

// push updated branch with new version #
git push <ssh-key> <branch> --tags

// get all branch names from remote
git fetch --all -v

// show all branches in remote
git branch -a

// pull from remote to live staging
git checkout -f <branch>
git pull origin Redesign // for Redesign branch

// get latest tag in branch
git describe --abbrev=0

// Add a comment to a commit
git commit -a -m "my message"

// git clone will give you the whole repository.
// After the clone, you can list the tags with git tag -l and then checkout a specific tag: git checkout tags/<tag_name>
// when doing a checkout and as Derek mentioned, the repo goes into a "detached head" state. instead, add the -b flag telling git to create a new branch and specify a branch name: git checkout <tag_name> -b <branch_name>

//#####################################################//
//Pull current working branch from git
git pull origin


//#####################################################//
//Working with Heroku demo.gigya.com

//update local to current production
git pull heroku master:master

//commit your changes
git commit -a -m "message"

//tag current version
git tag -a v1.00.02 -m "Second official version."

//push updated version
git push heroku master:master

mkdir /var/www/html/raasdev
cd raasdev
git init
heroku git:remote -a raasdev
git checkout origin
   or
git pull heroku master

// Force push with complete disregard for others
git push heroku master:master --force


// FROM HEROKU

Install the Heroku CLI

Download and install the Heroku CLI.

If you haven't already, log in to your Heroku account and follow the prompts to create a new SSH public key.

$ heroku login
Create a new Git repository

Initialize a git repository in a new or existing directory

$ cd my-project/
$ git init
$ heroku git:remote -a op-demo-gigya
Deploy your application

Commit your code to the repository and deploy it to Heroku using Git.

$ git add .
$ git commit -am "make it better"
$ git push heroku master
Existing Git repository

For existing repositories, simply add the heroku remote

$ heroku git:remote -a op-demo-gigya

// END FROM HEROKU



// Not git, but important
//From terminal
//to create an entry for .htpasswd (this will print out the hashed password for copy/pasting into an .htpasswd file),
// where username is the username for the directory and password is the plain text password.
htpasswd -nb username password

//to create a brand new .htpasswd file use this (you will be prompted for the password after pressing enter).
htpasswd -c .htpasswd username
